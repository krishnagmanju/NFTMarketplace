{
  "address": "0xF43E212BDef3Fc844bdF857E5613eF65aA88Ad8C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_servicefeepercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Nfts",
      "outputs": [
        {
          "internalType": "address",
          "name": "owners",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isForSelling",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokenIdtoPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "currency",
          "type": "string"
        }
      ],
      "name": "buyNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isForSelling",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_servicefeepercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOfNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "putForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "servicefeepercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6ef971d949f9396c31e6be129632ca8cb82692af20187ab43a10649e46faaf6",
  "receipt": {
    "to": null,
    "from": "0xBB7495884F80849f3828FC1339CeDD288434Ad59",
    "contractAddress": "0xF43E212BDef3Fc844bdF857E5613eF65aA88Ad8C",
    "transactionIndex": 24,
    "gasUsed": "1538910",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7021e7e5791d42a1842f6db97ba8e8902f1f9049c5126684c4d4dbd61259e7d2",
    "transactionHash": "0xf6ef971d949f9396c31e6be129632ca8cb82692af20187ab43a10649e46faaf6",
    "logs": [],
    "blockNumber": 7720392,
    "cumulativeGasUsed": "9612370",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    "0x7c177bFe09d45546E0f4C50AdC3D6b7D2B4C322E"
  ],
  "numDeployments": 1,
  "solcInputHash": "da1d77a21b0014f9d7226054289a91c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_servicefeepercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Nfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owners\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isForSelling\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenIdtoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForSelling\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_servicefeepercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"putForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"servicefeepercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketV2.sol\":\"NftMarketV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface Tokentransfer {\\n    function transferToken (address from,address to, uint amount) external;\\n    function balanceOf(address account) external returns (uint256);\\n    function allowance(address owner, address spender) external returns (uint256);\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0x26e88068135def30241f4df39f0424ee2a7fde8705b1a912071ee9e1bf78658e\",\"license\":\"MIT\"},\"contracts/NftMarketV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract NftMarketV2  is Initializable {\\n    struct NftMarket {\\n        address owners;\\n        bool isForSelling;\\n        uint256 price;\\n    }\\n\\n    Tokentransfer xnfttoken;\\n\\n    event payout(address recipient, uint256 amount);\\n\\n    address public admin;\\n    uint256 public servicefeepercentage;\\n\\n    mapping(uint256 => NftMarket) public Nfts;\\n    mapping(uint256 => uint256) public TokenIdtoPrice;\\n\\n     constructor(uint256 _servicefeepercentage, address erc20) {\\n        admin = msg.sender;\\n        servicefeepercentage = _servicefeepercentage;\\n        xnfttoken = Tokentransfer(erc20);\\n    }\\n\\n    function initialize (uint256 _servicefeepercentage, address erc20)  public initializer {\\n        admin = msg.sender;\\n        servicefeepercentage = _servicefeepercentage;\\n        xnfttoken = Tokentransfer(erc20);\\n    }\\n\\n    function createNFT(\\n        uint256 tokenId,\\n        bool isForSelling,\\n        uint256 price\\n    ) public {\\n        require(Nfts[tokenId].owners == address(0), \\\"token exist\\\");\\n        Nfts[tokenId] = NftMarket(msg.sender, isForSelling, price);\\n    }\\n\\n    function ownerOfNFT(uint256 _tokenId) public view returns (address) {\\n        return Nfts[_tokenId].owners;\\n    }\\n\\n    function putForSale(uint256 _tokenId, uint256 price) public {\\n        require(Nfts[_tokenId].isForSelling == false, \\\"already for sale\\\");\\n        Nfts[_tokenId].isForSelling = true;\\n        TokenIdtoPrice[_tokenId] = price;\\n        require(price != 0, \\\"price not assigned\\\");\\n    }\\n\\n    function buyNFT(uint256 _tokenId, string calldata currency) public payable {\\n        require(Nfts[_tokenId].owners != address(0), \\\"token doesnt exist\\\");\\n        require(Nfts[_tokenId].isForSelling == true, \\\"Not for sale\\\");\\n\\n        if (\\n            keccak256(abi.encodePacked(currency)) ==\\n            keccak256(abi.encodePacked(\\\"Ether\\\"))\\n        ) {\\n            require(msg.value == Nfts[_tokenId].price, \\\"price not met\\\");\\n\\n            uint256 adminamount = (msg.value * servicefeepercentage) / (100);\\n            uint256 owneramount = msg.value - adminamount;\\n\\n            payable(admin).transfer(adminamount);\\n            emit payout(admin, adminamount);\\n            payable(Nfts[_tokenId].owners).transfer(owneramount);\\n            emit payout(Nfts[_tokenId].owners, owneramount);\\n        } else if (\\n            keccak256(abi.encodePacked(currency)) ==\\n            keccak256(abi.encodePacked(\\\"Token\\\"))\\n        ) {\\n            require(\\n                Nfts[_tokenId].price <= xnfttoken.balanceOf(msg.sender),\\n                \\\"Insufficient balance\\\"\\n            );\\n           \\n            uint256 adminamount = (Nfts[_tokenId].price *\\n                servicefeepercentage) / (100);\\n            uint256 owneramount = Nfts[_tokenId].price - adminamount;\\n\\n            xnfttoken.transferToken(msg.sender, admin, adminamount);\\n            emit payout(admin, adminamount);\\n            xnfttoken.transferToken(\\n                msg.sender,\\n                Nfts[_tokenId].owners,\\n                owneramount\\n            );\\n            emit payout(Nfts[_tokenId].owners, owneramount);\\n        }\\n        Nfts[_tokenId].owners = msg.sender;\\n        Nfts[_tokenId].isForSelling = false;\\n    }\\n}\\n\",\"keccak256\":\"0xae29056ca8acd1413bd2456ef9b19addd4021cd04c980b00b1d6ca6d8581cb13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b6f38038062001b6f83398181016040528101906200003791906200016d565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028190555080600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b4565b600080fd5b6000819050919050565b620000e281620000cd565b8114620000ee57600080fd5b50565b6000815190506200010281620000d7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001358262000108565b9050919050565b620001478162000128565b81146200015357600080fd5b50565b60008151905062000167816200013c565b92915050565b60008060408385031215620001875762000186620000c8565b5b60006200019785828601620000f1565b9250506020620001aa8582860162000156565b9150509250929050565b6119ab80620001c46000396000f3fe6080604052600436106100865760003560e01c806346c595311161005957806346c5953114610138578063bc8a436114610177578063da35a26f146101b4578063f057f726146101dd578063f851a4401461020657610086565b80630854748a1461008b57806327d3490d146100a75780632d8a746e146100d25780633cd76be21461010f575b600080fd5b6100a560048036038101906100a09190611008565b610231565b005b3480156100b357600080fd5b506100bc610a47565b6040516100c99190611077565b60405180910390f35b3480156100de57600080fd5b506100f960048036038101906100f49190611092565b610a4d565b6040516101069190611100565b60405180910390f35b34801561011b57600080fd5b506101366004803603810190610131919061111b565b610a8d565b005b34801561014457600080fd5b5061015f600480360381019061015a9190611092565b610b86565b60405161016e93929190611176565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611092565b610bdd565b6040516101ab9190611077565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d691906111d9565b610bf5565b005b3480156101e957600080fd5b5061020460048036038101906101ff9190611245565b610db6565b005b34801561021257600080fd5b5061021b610f1a565b6040516102289190611100565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce906112f5565b60405180910390fd5b600115156003600085815260200190815260200160002060000160149054906101000a900460ff16151514610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890611361565b60405180910390fd5b604051602001610350906113d8565b604051602081830303815290604052805190602001208282604051602001610379929190611421565b6040516020818303038152906040528051906020012014156105d257600360008481526020019081526020016000206001015434146103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490611486565b60405180910390fd5b60006064600254346103ff91906114d5565b610409919061155e565b905060008134610419919061158f565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610483573d6000803e3d6000fd5b507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516104d79291906115c3565b60405180910390a16003600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561055b573d6000803e3d6000fd5b507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a16003600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040516105c39291906115c3565b60405180910390a150506109be565b6040516020016105e190611638565b60405160208183030381529060405280519060200120828260405160200161060a929190611421565b6040516020818303038152906040528051906020012014156109bd57600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106819190611100565b6020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190611662565b6003600085815260200190815260200160002060010154111561071c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610713906116db565b60405180910390fd5b60006064600254600360008781526020019081526020016000206001015461074491906114d5565b61074e919061155e565b90506000816003600087815260200190815260200160002060010154610774919061158f565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5537ede33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016107f7939291906116fb565b600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b505050507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161087c9291906115c3565b60405180910390a1600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5537ede336003600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610919939291906116fb565b600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b505050507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a16003600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040516109b29291906115c3565b60405180910390a150505b5b336003600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003600085815260200190815260200160002060000160146101000a81548160ff021916908315150217905550505050565b60025481565b60006003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600015156003600084815260200190815260200160002060000160149054906101000a900460ff16151514610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee9061177e565b60405180910390fd5b60016003600084815260200190815260200160002060000160146101000a81548160ff0219169083151502179055508060046000848152602001908152602001600020819055506000811415610b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b79906117ea565b60405180910390fd5b5050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154905083565b60046020528060005260406000206000915090505481565b60008060019054906101000a900460ff16159050808015610c265750600160008054906101000a900460ff1660ff16105b80610c535750610c3530610f40565b158015610c525750600160008054906101000a900460ff1660ff16145b5b610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c899061187c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610ccf576001600060016101000a81548160ff0219169083151502179055505b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260028190555081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610db15760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610da891906118ee565b60405180910390a15b505050565b600073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290611955565b60405180910390fd5b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018315158152602001828152506003600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160010155905050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600080fd5b6000819050919050565b610f8081610f6d565b8114610f8b57600080fd5b50565b600081359050610f9d81610f77565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610fc857610fc7610fa3565b5b8235905067ffffffffffffffff811115610fe557610fe4610fa8565b5b60208301915083600182028301111561100157611000610fad565b5b9250929050565b60008060006040848603121561102157611020610f63565b5b600061102f86828701610f8e565b935050602084013567ffffffffffffffff8111156110505761104f610f68565b5b61105c86828701610fb2565b92509250509250925092565b61107181610f6d565b82525050565b600060208201905061108c6000830184611068565b92915050565b6000602082840312156110a8576110a7610f63565b5b60006110b684828501610f8e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ea826110bf565b9050919050565b6110fa816110df565b82525050565b600060208201905061111560008301846110f1565b92915050565b6000806040838503121561113257611131610f63565b5b600061114085828601610f8e565b925050602061115185828601610f8e565b9150509250929050565b60008115159050919050565b6111708161115b565b82525050565b600060608201905061118b60008301866110f1565b6111986020830185611167565b6111a56040830184611068565b949350505050565b6111b6816110df565b81146111c157600080fd5b50565b6000813590506111d3816111ad565b92915050565b600080604083850312156111f0576111ef610f63565b5b60006111fe85828601610f8e565b925050602061120f858286016111c4565b9150509250929050565b6112228161115b565b811461122d57600080fd5b50565b60008135905061123f81611219565b92915050565b60008060006060848603121561125e5761125d610f63565b5b600061126c86828701610f8e565b935050602061127d86828701611230565b925050604061128e86828701610f8e565b9150509250925092565b600082825260208201905092915050565b7f746f6b656e20646f65736e742065786973740000000000000000000000000000600082015250565b60006112df601283611298565b91506112ea826112a9565b602082019050919050565b6000602082019050818103600083015261130e816112d2565b9050919050565b7f4e6f7420666f722073616c650000000000000000000000000000000000000000600082015250565b600061134b600c83611298565b915061135682611315565b602082019050919050565b6000602082019050818103600083015261137a8161133e565b9050919050565b600081905092915050565b7f4574686572000000000000000000000000000000000000000000000000000000600082015250565b60006113c2600583611381565b91506113cd8261138c565b600582019050919050565b60006113e3826113b5565b9150819050919050565b82818337600083830152505050565b60006114088385611381565b93506114158385846113ed565b82840190509392505050565b600061142e8284866113fc565b91508190509392505050565b7f7072696365206e6f74206d657400000000000000000000000000000000000000600082015250565b6000611470600d83611298565b915061147b8261143a565b602082019050919050565b6000602082019050818103600083015261149f81611463565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114e082610f6d565b91506114eb83610f6d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611524576115236114a6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061156982610f6d565b915061157483610f6d565b9250826115845761158361152f565b5b828204905092915050565b600061159a82610f6d565b91506115a583610f6d565b9250828210156115b8576115b76114a6565b5b828203905092915050565b60006040820190506115d860008301856110f1565b6115e56020830184611068565b9392505050565b7f546f6b656e000000000000000000000000000000000000000000000000000000600082015250565b6000611622600583611381565b915061162d826115ec565b600582019050919050565b600061164382611615565b9150819050919050565b60008151905061165c81610f77565b92915050565b60006020828403121561167857611677610f63565b5b60006116868482850161164d565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006116c5601483611298565b91506116d08261168f565b602082019050919050565b600060208201905081810360008301526116f4816116b8565b9050919050565b600060608201905061171060008301866110f1565b61171d60208301856110f1565b61172a6040830184611068565b949350505050565b7f616c726561647920666f722073616c6500000000000000000000000000000000600082015250565b6000611768601083611298565b915061177382611732565b602082019050919050565b600060208201905081810360008301526117978161175b565b9050919050565b7f7072696365206e6f742061737369676e65640000000000000000000000000000600082015250565b60006117d4601283611298565b91506117df8261179e565b602082019050919050565b60006020820190508181036000830152611803816117c7565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611866602e83611298565b91506118718261180a565b604082019050919050565b6000602082019050818103600083015261189581611859565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006118d86118d36118ce8461189c565b6118b3565b6118a6565b9050919050565b6118e8816118bd565b82525050565b600060208201905061190360008301846118df565b92915050565b7f746f6b656e206578697374000000000000000000000000000000000000000000600082015250565b600061193f600b83611298565b915061194a82611909565b602082019050919050565b6000602082019050818103600083015261196e81611932565b905091905056fea264697066735822122084b05b4589420d4aca66eba4a37a498e39770de20519389daa9b2a0364b2d8d164736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806346c595311161005957806346c5953114610138578063bc8a436114610177578063da35a26f146101b4578063f057f726146101dd578063f851a4401461020657610086565b80630854748a1461008b57806327d3490d146100a75780632d8a746e146100d25780633cd76be21461010f575b600080fd5b6100a560048036038101906100a09190611008565b610231565b005b3480156100b357600080fd5b506100bc610a47565b6040516100c99190611077565b60405180910390f35b3480156100de57600080fd5b506100f960048036038101906100f49190611092565b610a4d565b6040516101069190611100565b60405180910390f35b34801561011b57600080fd5b506101366004803603810190610131919061111b565b610a8d565b005b34801561014457600080fd5b5061015f600480360381019061015a9190611092565b610b86565b60405161016e93929190611176565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611092565b610bdd565b6040516101ab9190611077565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d691906111d9565b610bf5565b005b3480156101e957600080fd5b5061020460048036038101906101ff9190611245565b610db6565b005b34801561021257600080fd5b5061021b610f1a565b6040516102289190611100565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce906112f5565b60405180910390fd5b600115156003600085815260200190815260200160002060000160149054906101000a900460ff16151514610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890611361565b60405180910390fd5b604051602001610350906113d8565b604051602081830303815290604052805190602001208282604051602001610379929190611421565b6040516020818303038152906040528051906020012014156105d257600360008481526020019081526020016000206001015434146103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490611486565b60405180910390fd5b60006064600254346103ff91906114d5565b610409919061155e565b905060008134610419919061158f565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610483573d6000803e3d6000fd5b507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516104d79291906115c3565b60405180910390a16003600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561055b573d6000803e3d6000fd5b507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a16003600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040516105c39291906115c3565b60405180910390a150506109be565b6040516020016105e190611638565b60405160208183030381529060405280519060200120828260405160200161060a929190611421565b6040516020818303038152906040528051906020012014156109bd57600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106819190611100565b6020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190611662565b6003600085815260200190815260200160002060010154111561071c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610713906116db565b60405180910390fd5b60006064600254600360008781526020019081526020016000206001015461074491906114d5565b61074e919061155e565b90506000816003600087815260200190815260200160002060010154610774919061158f565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5537ede33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016107f7939291906116fb565b600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b505050507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161087c9291906115c3565b60405180910390a1600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5537ede336003600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610919939291906116fb565b600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b505050507f117de2fd76ea4a212645377cbe8b6af68c7e4c8169b18d98c4e6aa04d07366a16003600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040516109b29291906115c3565b60405180910390a150505b5b336003600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003600085815260200190815260200160002060000160146101000a81548160ff021916908315150217905550505050565b60025481565b60006003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600015156003600084815260200190815260200160002060000160149054906101000a900460ff16151514610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee9061177e565b60405180910390fd5b60016003600084815260200190815260200160002060000160146101000a81548160ff0219169083151502179055508060046000848152602001908152602001600020819055506000811415610b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b79906117ea565b60405180910390fd5b5050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154905083565b60046020528060005260406000206000915090505481565b60008060019054906101000a900460ff16159050808015610c265750600160008054906101000a900460ff1660ff16105b80610c535750610c3530610f40565b158015610c525750600160008054906101000a900460ff1660ff16145b5b610c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c899061187c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610ccf576001600060016101000a81548160ff0219169083151502179055505b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260028190555081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610db15760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610da891906118ee565b60405180910390a15b505050565b600073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290611955565b60405180910390fd5b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018315158152602001828152506003600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160010155905050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600080fd5b6000819050919050565b610f8081610f6d565b8114610f8b57600080fd5b50565b600081359050610f9d81610f77565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610fc857610fc7610fa3565b5b8235905067ffffffffffffffff811115610fe557610fe4610fa8565b5b60208301915083600182028301111561100157611000610fad565b5b9250929050565b60008060006040848603121561102157611020610f63565b5b600061102f86828701610f8e565b935050602084013567ffffffffffffffff8111156110505761104f610f68565b5b61105c86828701610fb2565b92509250509250925092565b61107181610f6d565b82525050565b600060208201905061108c6000830184611068565b92915050565b6000602082840312156110a8576110a7610f63565b5b60006110b684828501610f8e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ea826110bf565b9050919050565b6110fa816110df565b82525050565b600060208201905061111560008301846110f1565b92915050565b6000806040838503121561113257611131610f63565b5b600061114085828601610f8e565b925050602061115185828601610f8e565b9150509250929050565b60008115159050919050565b6111708161115b565b82525050565b600060608201905061118b60008301866110f1565b6111986020830185611167565b6111a56040830184611068565b949350505050565b6111b6816110df565b81146111c157600080fd5b50565b6000813590506111d3816111ad565b92915050565b600080604083850312156111f0576111ef610f63565b5b60006111fe85828601610f8e565b925050602061120f858286016111c4565b9150509250929050565b6112228161115b565b811461122d57600080fd5b50565b60008135905061123f81611219565b92915050565b60008060006060848603121561125e5761125d610f63565b5b600061126c86828701610f8e565b935050602061127d86828701611230565b925050604061128e86828701610f8e565b9150509250925092565b600082825260208201905092915050565b7f746f6b656e20646f65736e742065786973740000000000000000000000000000600082015250565b60006112df601283611298565b91506112ea826112a9565b602082019050919050565b6000602082019050818103600083015261130e816112d2565b9050919050565b7f4e6f7420666f722073616c650000000000000000000000000000000000000000600082015250565b600061134b600c83611298565b915061135682611315565b602082019050919050565b6000602082019050818103600083015261137a8161133e565b9050919050565b600081905092915050565b7f4574686572000000000000000000000000000000000000000000000000000000600082015250565b60006113c2600583611381565b91506113cd8261138c565b600582019050919050565b60006113e3826113b5565b9150819050919050565b82818337600083830152505050565b60006114088385611381565b93506114158385846113ed565b82840190509392505050565b600061142e8284866113fc565b91508190509392505050565b7f7072696365206e6f74206d657400000000000000000000000000000000000000600082015250565b6000611470600d83611298565b915061147b8261143a565b602082019050919050565b6000602082019050818103600083015261149f81611463565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114e082610f6d565b91506114eb83610f6d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611524576115236114a6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061156982610f6d565b915061157483610f6d565b9250826115845761158361152f565b5b828204905092915050565b600061159a82610f6d565b91506115a583610f6d565b9250828210156115b8576115b76114a6565b5b828203905092915050565b60006040820190506115d860008301856110f1565b6115e56020830184611068565b9392505050565b7f546f6b656e000000000000000000000000000000000000000000000000000000600082015250565b6000611622600583611381565b915061162d826115ec565b600582019050919050565b600061164382611615565b9150819050919050565b60008151905061165c81610f77565b92915050565b60006020828403121561167857611677610f63565b5b60006116868482850161164d565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006116c5601483611298565b91506116d08261168f565b602082019050919050565b600060208201905081810360008301526116f4816116b8565b9050919050565b600060608201905061171060008301866110f1565b61171d60208301856110f1565b61172a6040830184611068565b949350505050565b7f616c726561647920666f722073616c6500000000000000000000000000000000600082015250565b6000611768601083611298565b915061177382611732565b602082019050919050565b600060208201905081810360008301526117978161175b565b9050919050565b7f7072696365206e6f742061737369676e65640000000000000000000000000000600082015250565b60006117d4601283611298565b91506117df8261179e565b602082019050919050565b60006020820190508181036000830152611803816117c7565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611866602e83611298565b91506118718261180a565b604082019050919050565b6000602082019050818103600083015261189581611859565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006118d86118d36118ce8461189c565b6118b3565b6118a6565b9050919050565b6118e8816118bd565b82525050565b600060208201905061190360008301846118df565b92915050565b7f746f6b656e206578697374000000000000000000000000000000000000000000600082015250565b600061193f600b83611298565b915061194a82611909565b602082019050919050565b6000602082019050818103600083015261196e81611932565b905091905056fea264697066735822122084b05b4589420d4aca66eba4a37a498e39770de20519389daa9b2a0364b2d8d164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1148,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "xnfttoken",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(Tokentransfer)1132"
      },
      {
        "astId": 1156,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1158,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "servicefeepercentage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1163,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "Nfts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(NftMarket)1145_storage)"
      },
      {
        "astId": 1167,
        "contract": "contracts/NftMarketV2.sol:NftMarketV2",
        "label": "TokenIdtoPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Tokentransfer)1132": {
        "encoding": "inplace",
        "label": "contract Tokentransfer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(NftMarket)1145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketV2.NftMarket)",
        "numberOfBytes": "32",
        "value": "t_struct(NftMarket)1145_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(NftMarket)1145_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketV2.NftMarket",
        "members": [
          {
            "astId": 1140,
            "contract": "contracts/NftMarketV2.sol:NftMarketV2",
            "label": "owners",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1142,
            "contract": "contracts/NftMarketV2.sol:NftMarketV2",
            "label": "isForSelling",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1144,
            "contract": "contracts/NftMarketV2.sol:NftMarketV2",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}